test/e2e/apimachinery/aggregator.go: "Should be able to support the 1.10 Sample API Server using the current Aggregator"
test/e2e/apimachinery/crd_conversion_webhook.go: "should be able to convert from CR v1 to CR v2"
test/e2e/apimachinery/crd_conversion_webhook.go: "should be able to convert a non homogeneous list of CRs"
test/e2e/apimachinery/crd_publish_openapi.go: "works for CRD with validation schema"
test/e2e/apimachinery/crd_publish_openapi.go: "works for CRD without validation schema"
test/e2e/apimachinery/crd_publish_openapi.go: "works for CRD preserving unknown fields at the schema root"
test/e2e/apimachinery/crd_publish_openapi.go: "works for CRD preserving unknown fields in an embedded object"
test/e2e/apimachinery/crd_publish_openapi.go: "works for multiple CRDs of different groups"
test/e2e/apimachinery/crd_publish_openapi.go: "works for multiple CRDs of same group but different versions"
test/e2e/apimachinery/crd_publish_openapi.go: "works for multiple CRDs of same group and version but different kinds"
test/e2e/apimachinery/crd_publish_openapi.go: "updates the published spec when one version gets renamed"
test/e2e/apimachinery/crd_publish_openapi.go: "removes definition from spec when one version gets changed to not be served"
test/e2e/apimachinery/crd_watch.go: "watch on custom resource definition objects"
test/e2e/apimachinery/custom_resource_definition.go: "creating/deleting custom resource definition objects works"
test/e2e/apimachinery/custom_resource_definition.go: "listing custom resource definition objects works"
test/e2e/apimachinery/custom_resource_definition.go: "getting/updating/patching custom resource definition status sub-resource works"
test/e2e/apimachinery/custom_resource_definition.go: "should include custom resource definition resources in discovery documents"
test/e2e/apimachinery/custom_resource_definition.go: "custom resource defaulting for requests and from storage works"
test/e2e/apimachinery/garbage_collector.go: "should delete pods created by rc when not orphaning"
test/e2e/apimachinery/garbage_collector.go: "should orphan pods created by rc if delete options say so"
test/e2e/apimachinery/garbage_collector.go: "should delete RS created by deployment when not orphaning"
test/e2e/apimachinery/garbage_collector.go: "should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan"
test/e2e/apimachinery/garbage_collector.go: "should keep the rc around until all its pods are deleted if the deleteOptions says so"
test/e2e/apimachinery/garbage_collector.go: "should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted"
test/e2e/apimachinery/garbage_collector.go: "should not be blocked by dependency circle"
test/e2e/apimachinery/namespace.go: "should ensure that all pods are removed when a namespace is deleted"
test/e2e/apimachinery/namespace.go: "should ensure that all services are removed when a namespace is deleted"
test/e2e/apimachinery/resource_quota.go: "should create a ResourceQuota and ensure its status is promptly calculated."
test/e2e/apimachinery/resource_quota.go: "should create a ResourceQuota and capture the life of a service."
test/e2e/apimachinery/resource_quota.go: "should create a ResourceQuota and capture the life of a secret."
test/e2e/apimachinery/resource_quota.go: "should create a ResourceQuota and capture the life of a pod."
test/e2e/apimachinery/resource_quota.go: "should create a ResourceQuota and capture the life of a configMap."
test/e2e/apimachinery/resource_quota.go: "should create a ResourceQuota and capture the life of a replication controller."
test/e2e/apimachinery/resource_quota.go: "should create a ResourceQuota and capture the life of a replica set."
test/e2e/apimachinery/resource_quota.go: "should verify ResourceQuota with terminating scopes."
test/e2e/apimachinery/resource_quota.go: "should verify ResourceQuota with best effort scope."
test/e2e/apimachinery/resource_quota.go: "should be able to update and delete ResourceQuota."
test/e2e/apimachinery/table_conversion.go: "should return a 406 for a backend which does not implement metadata"
test/e2e/apimachinery/watch.go: "should observe add, update, and delete watch notifications on configmaps"
test/e2e/apimachinery/watch.go: "should be able to start watching from a specific resource version"
test/e2e/apimachinery/watch.go: "should be able to restart watching from the last resource version observed by the previous watch"
test/e2e/apimachinery/watch.go: "should observe an object deletion if it stops meeting the requirements of the selector"
test/e2e/apimachinery/watch.go: "should receive events on concurrent watches in same order"
test/e2e/apimachinery/webhook.go: "should include webhook resources in discovery documents"
test/e2e/apimachinery/webhook.go: "should be able to deny pod and configmap creation"
test/e2e/apimachinery/webhook.go: "should be able to deny attaching pod"
test/e2e/apimachinery/webhook.go: "should be able to deny custom resource creation, update and deletion"
test/e2e/apimachinery/webhook.go: "should unconditionally reject operations on fail closed webhook"
test/e2e/apimachinery/webhook.go: "should mutate configmap"
test/e2e/apimachinery/webhook.go: "should mutate pod and apply defaults after mutation"
test/e2e/apimachinery/webhook.go: "should not be able to mutate or prevent deletion of webhook configuration objects"
test/e2e/apimachinery/webhook.go: "should mutate custom resource"
test/e2e/apimachinery/webhook.go: "should deny crd creation"
test/e2e/apimachinery/webhook.go: "should mutate custom resource with different stored version"
test/e2e/apimachinery/webhook.go: "should mutate custom resource with pruning"
test/e2e/apimachinery/webhook.go: "should honor timeout"
test/e2e/apimachinery/webhook.go: "patching/updating a validating webhook should work"
test/e2e/apimachinery/webhook.go: "patching/updating a mutating webhook should work"
test/e2e/apimachinery/webhook.go: "listing validating webhooks should work"
test/e2e/apimachinery/webhook.go: "listing mutating webhooks should work"
test/e2e/apps/daemon_set.go: "should run and stop simple daemon"
test/e2e/apps/daemon_set.go: "should run and stop complex daemon"
test/e2e/apps/daemon_set.go: "should retry creating failed daemon pods"
test/e2e/apps/daemon_set.go: "should update pod when spec was updated and update strategy is RollingUpdate"
test/e2e/apps/daemon_set.go: "should rollback without unnecessary restarts"
test/e2e/apps/deployment.go: "RollingUpdateDeployment should delete old pods and create new ones"
test/e2e/apps/deployment.go: "RecreateDeployment should delete old pods and create new ones"
test/e2e/apps/deployment.go: "deployment should delete old replica sets"
test/e2e/apps/deployment.go: "deployment should support rollover"
test/e2e/apps/deployment.go: "deployment should support proportional scaling"
test/e2e/apps/job.go: "should run a job to completion when tasks sometimes fail and are locally restarted"
test/e2e/apps/job.go: "should delete a job"
test/e2e/apps/job.go: "should adopt matching orphans and release non-matching pods"
test/e2e/apps/rc.go: "should serve a basic image on each replica with a public image"
test/e2e/apps/rc.go: "should surface a failure condition on a common issue like exceeded quota"
test/e2e/apps/rc.go: "should adopt matching pods on creation"
test/e2e/apps/rc.go: "should release no longer matching pods"
test/e2e/apps/replica_set.go: "should serve a basic image on each replica with a public image"
test/e2e/apps/replica_set.go: "should adopt matching pods on creation and release no longer matching pods"
test/e2e/apps/statefulset.go: "should perform rolling updates and roll backs of template modifications"
test/e2e/apps/statefulset.go: "should perform canary updates and phased rolling updates of template modifications"
test/e2e/apps/statefulset.go: "Scaling should happen in predictable order and halt if any stateful pod is unhealthy"
test/e2e/apps/statefulset.go: "Burst scaling should run to completion even with unhealthy pods"
test/e2e/apps/statefulset.go: "Should recreate evicted statefulset"
test/e2e/apps/statefulset.go: "should have a working scale subresource"
test/e2e/auth/service_accounts.go: "should mount an API token into pods"
test/e2e/auth/service_accounts.go: "should allow opting out of API token automount"
test/e2e/common/configmap.go: "should be consumable via environment variable"
test/e2e/common/configmap.go: "should be consumable via the environment"
test/e2e/common/configmap.go: "should fail to create ConfigMap with empty key"
test/e2e/common/configmap_volume.go: "should be consumable from pods in volume"
test/e2e/common/configmap_volume.go: "should be consumable from pods in volume with defaultMode set"
test/e2e/common/configmap_volume.go: "should be consumable from pods in volume as non-root"
test/e2e/common/configmap_volume.go: "should be consumable from pods in volume with mappings"
test/e2e/common/configmap_volume.go: "should be consumable from pods in volume with mappings and Item mode set"
test/e2e/common/configmap_volume.go: "should be consumable from pods in volume with mappings as non-root"
test/e2e/common/configmap_volume.go: "updates should be reflected in volume"
test/e2e/common/configmap_volume.go: "binary data should be reflected in volume"
test/e2e/common/configmap_volume.go: "optional updates should be reflected in volume"
test/e2e/common/configmap_volume.go: "should be consumable in multiple volumes in the same pod"
test/e2e/common/container_probe.go: "with readiness probe should not be ready before initial delay and never restart"
test/e2e/common/container_probe.go: "with readiness probe that fails should never be ready and never restart"
test/e2e/common/container_probe.go: "should be restarted with a exec \\\"cat /tmp/health\\\" liveness probe"
test/e2e/common/container_probe.go: "should *not* be restarted with a exec \\\"cat /tmp/health\\\" liveness probe"
test/e2e/common/container_probe.go: "should be restarted with a /healthz http liveness probe"
test/e2e/common/container_probe.go: "should have monotonically increasing restart count"
test/e2e/common/container_probe.go: "should *not* be restarted with a /healthz http liveness probe"
test/e2e/common/docker_containers.go: "should use the image defaults if command and args are blank"
test/e2e/common/docker_containers.go: "should be able to override the image's default arguments (docker cmd)"
test/e2e/common/docker_containers.go: "should be able to override the image's default command (docker entrypoint)"
test/e2e/common/docker_containers.go: "should be able to override the image's default command and arguments"
test/e2e/common/downward_api.go: "should provide pod name, namespace and IP address as env vars"
test/e2e/common/downward_api.go: "should provide host IP as an env var"
test/e2e/common/downward_api.go: "should provide container's limits.cpu/memory and requests.cpu/memory as env vars"
test/e2e/common/downward_api.go: "should provide default limits.cpu/memory from node allocatable"
test/e2e/common/downward_api.go: "should provide pod UID as env vars"
test/e2e/common/downwardapi_volume.go: "should provide podname only"
test/e2e/common/downwardapi_volume.go: "should set DefaultMode on files"
test/e2e/common/downwardapi_volume.go: "should set mode on item file"
test/e2e/common/downwardapi_volume.go: "should update labels on modification"
test/e2e/common/downwardapi_volume.go: "should update annotations on modification"
test/e2e/common/downwardapi_volume.go: "should provide container's cpu limit"
test/e2e/common/downwardapi_volume.go: "should provide container's memory limit"
test/e2e/common/downwardapi_volume.go: "should provide container's cpu request"
test/e2e/common/downwardapi_volume.go: "should provide container's memory request"
test/e2e/common/downwardapi_volume.go: "should provide node allocatable (cpu) as default cpu limit if the limit is not set"
test/e2e/common/downwardapi_volume.go: "should provide node allocatable (memory) as default memory limit if the limit is not set"
test/e2e/common/empty_dir.go: "volume on tmpfs should have the correct mode"
test/e2e/common/empty_dir.go: "should support (root,0644,tmpfs)"
test/e2e/common/empty_dir.go: "should support (root,0666,tmpfs)"
test/e2e/common/empty_dir.go: "should support (root,0777,tmpfs)"
test/e2e/common/empty_dir.go: "should support (non-root,0644,tmpfs)"
test/e2e/common/empty_dir.go: "should support (non-root,0666,tmpfs)"
test/e2e/common/empty_dir.go: "should support (non-root,0777,tmpfs)"
test/e2e/common/empty_dir.go: "volume on default medium should have the correct mode"
test/e2e/common/empty_dir.go: "should support (root,0644,default)"
test/e2e/common/empty_dir.go: "should support (root,0666,default)"
test/e2e/common/empty_dir.go: "should support (root,0777,default)"
test/e2e/common/empty_dir.go: "should support (non-root,0644,default)"
test/e2e/common/empty_dir.go: "should support (non-root,0666,default)"
test/e2e/common/empty_dir.go: "should support (non-root,0777,default)"
test/e2e/common/empty_dir.go: "pod should support shared volumes between containers"
test/e2e/common/expansion.go: "should allow composing env vars into new env vars"
test/e2e/common/expansion.go: "should allow substituting values in a container's command"
test/e2e/common/expansion.go: "should allow substituting values in a container's args"
test/e2e/common/host_path.go: "should give a volume the correct mode"
test/e2e/common/init_container.go: "should invoke init containers on a RestartNever pod"
test/e2e/common/init_container.go: "should invoke init containers on a RestartAlways pod"
test/e2e/common/init_container.go: "should not start app containers if init containers fail on a RestartAlways pod"
test/e2e/common/init_container.go: "should not start app containers and fail the pod if init containers fail on a RestartNever pod"
test/e2e/common/kubelet.go: "should print the output to logs"
test/e2e/common/kubelet.go: "should have an terminated reason"
test/e2e/common/kubelet.go: "should be possible to delete"
test/e2e/common/kubelet.go: "should write entries to /etc/hosts"
test/e2e/common/kubelet.go: "should not write to root filesystem"
test/e2e/common/kubelet_etc_hosts.go: "should test kubelet managed /etc/hosts file"
test/e2e/common/lease.go: "lease API should be available"
test/e2e/common/lifecycle_hook.go: "should execute poststart exec hook properly"
test/e2e/common/lifecycle_hook.go: "should execute prestop exec hook properly"
test/e2e/common/lifecycle_hook.go: "should execute poststart http hook properly"
test/e2e/common/lifecycle_hook.go: "should execute prestop http hook properly"
test/e2e/common/networking.go: "should function for intra-pod communication: http"
test/e2e/common/networking.go: "should function for intra-pod communication: udp"
test/e2e/common/networking.go: "should function for node-pod communication: http"
test/e2e/common/networking.go: "should function for node-pod communication: udp"
test/e2e/common/pods.go: "should get a host IP"
test/e2e/common/pods.go: "should be submitted and removed"
test/e2e/common/pods.go: "should be updated"
test/e2e/common/pods.go: "should allow activeDeadlineSeconds to be updated"
test/e2e/common/pods.go: "should contain environment variables for services"
test/e2e/common/pods.go: "should support remote command execution over websockets"
test/e2e/common/pods.go: "should support retrieving logs from the container over websockets"
test/e2e/common/projected_combined.go: "should project all components that make up the projection API"
test/e2e/common/projected_configmap.go: "should be consumable from pods in volume"
test/e2e/common/projected_configmap.go: "should be consumable from pods in volume with defaultMode set"
test/e2e/common/projected_configmap.go: "should be consumable from pods in volume as non-root"
test/e2e/common/projected_configmap.go: "should be consumable from pods in volume with mappings"
test/e2e/common/projected_configmap.go: "should be consumable from pods in volume with mappings and Item mode set"
test/e2e/common/projected_configmap.go: "should be consumable from pods in volume with mappings as non-root"
test/e2e/common/projected_configmap.go: "updates should be reflected in volume"
test/e2e/common/projected_configmap.go: "optional updates should be reflected in volume"
test/e2e/common/projected_configmap.go: "should be consumable in multiple volumes in the same pod"
test/e2e/common/projected_downwardapi.go: "should provide podname only"
test/e2e/common/projected_downwardapi.go: "should set DefaultMode on files"
test/e2e/common/projected_downwardapi.go: "should set mode on item file"
test/e2e/common/projected_downwardapi.go: "should update labels on modification"
test/e2e/common/projected_downwardapi.go: "should update annotations on modification"
test/e2e/common/projected_downwardapi.go: "should provide container's cpu limit"
test/e2e/common/projected_downwardapi.go: "should provide container's memory limit"
test/e2e/common/projected_downwardapi.go: "should provide container's cpu request"
test/e2e/common/projected_downwardapi.go: "should provide container's memory request"
test/e2e/common/projected_downwardapi.go: "should provide node allocatable (cpu) as default cpu limit if the limit is not set"
test/e2e/common/projected_downwardapi.go: "should provide node allocatable (memory) as default memory limit if the limit is not set"
test/e2e/common/projected_secret.go: "should be consumable from pods in volume"
test/e2e/common/projected_secret.go: "should be consumable from pods in volume with defaultMode set"
test/e2e/common/projected_secret.go: "should be consumable from pods in volume as non-root with defaultMode and fsGroup set"
test/e2e/common/projected_secret.go: "should be consumable from pods in volume with mappings"
test/e2e/common/projected_secret.go: "should be consumable from pods in volume with mappings and Item Mode set"
test/e2e/common/projected_secret.go: "should be consumable in multiple volumes in a pod"
test/e2e/common/projected_secret.go: "optional updates should be reflected in volume"
test/e2e/common/runtime.go: "should run with the expected status"
test/e2e/common/runtime.go: "should report termination message  if TerminationMessagePath is set as non-root user and at a non-default path"
test/e2e/common/runtime.go: "should report termination message  from log output if TerminationMessagePolicy FallbackToLogsOnError is set"
test/e2e/common/runtime.go: "should report termination message  as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set"
test/e2e/common/runtime.go: "should report termination message  from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set"
test/e2e/common/secrets.go: "should be consumable from pods in env vars"
test/e2e/common/secrets.go: "should be consumable via the environment"
test/e2e/common/secrets.go: "should fail to create secret due to empty secret key"
test/e2e/common/secrets_volume.go: "should be consumable from pods in volume"
test/e2e/common/secrets_volume.go: "should be consumable from pods in volume with defaultMode set"
test/e2e/common/secrets_volume.go: "should be consumable from pods in volume as non-root with defaultMode and fsGroup set"
test/e2e/common/secrets_volume.go: "should be consumable from pods in volume with mappings"
test/e2e/common/secrets_volume.go: "should be consumable from pods in volume with mappings and Item Mode set"
test/e2e/common/secrets_volume.go: "should be able to mount in a volume regardless of a different secret existing with same name in different namespace"
test/e2e/common/secrets_volume.go: "should be consumable in multiple volumes in a pod"
test/e2e/common/secrets_volume.go: "optional updates should be reflected in volume"
test/e2e/common/security_context.go: "should run the container with uid 65534"
test/e2e/common/security_context.go: "should run the container with writable rootfs when readOnlyRootFilesystem=false"
test/e2e/common/security_context.go: "should run the container as unprivileged when false"
test/e2e/common/security_context.go: "should not allow privilege escalation when false"
test/e2e/kubectl/kubectl.go: "should create and stop a replication controller"
test/e2e/kubectl/kubectl.go: "should scale a replication controller"
test/e2e/kubectl/kubectl.go: "should do a rolling update of a replication controller"
test/e2e/kubectl/kubectl.go: "should create and stop a working application"
test/e2e/kubectl/kubectl.go: "should check if v1 is in available api versions"
test/e2e/kubectl/kubectl.go: "should check if Kubernetes master services is included in cluster-info"
test/e2e/kubectl/kubectl.go: "should check if kubectl describe prints relevant information for rc and pods"
test/e2e/kubectl/kubectl.go: "should create services for rc"
test/e2e/kubectl/kubectl.go: "should update the label on a resource"
test/e2e/kubectl/kubectl.go: "should be able to retrieve and filter logs"
test/e2e/kubectl/kubectl.go: "should add annotations for pods in rc"
test/e2e/kubectl/kubectl.go: "should check is all data is printed"
test/e2e/kubectl/kubectl.go: "should create an rc or deployment from an image"
test/e2e/kubectl/kubectl.go: "should create an rc from an image"
test/e2e/kubectl/kubectl.go: "should support rolling-update to same image"
test/e2e/kubectl/kubectl.go: "should create a deployment from an image"
test/e2e/kubectl/kubectl.go: "should create a job from an image when restart is OnFailure"
test/e2e/kubectl/kubectl.go: "should create a pod from an image when restart is Never"
test/e2e/kubectl/kubectl.go: "should update a single-container pod's image"
test/e2e/kubectl/kubectl.go: "should create a job from an image, then delete the job"
test/e2e/kubectl/kubectl.go: "should support proxy with --port 0"
test/e2e/kubectl/kubectl.go: "should support --unix-socket=/path"
test/e2e/network/dns.go: "should provide DNS for the cluster"
test/e2e/network/dns.go: "should provide /etc/hosts entries for the cluster"
test/e2e/network/dns.go: "should provide DNS for services"
test/e2e/network/dns.go: "should resolve DNS of partial qualified names for services"
test/e2e/network/dns.go: "should provide DNS for pods for Hostname"
test/e2e/network/dns.go: "should provide DNS for pods for Subdomain"
test/e2e/network/dns.go: "should provide DNS for ExternalName services"
test/e2e/network/dns.go: "should support configurable pod DNS nameservers"
test/e2e/network/proxy.go: "should proxy logs on node with explicit kubelet port using proxy subresource"
test/e2e/network/proxy.go: "should proxy logs on node using proxy subresource"
test/e2e/network/proxy.go: "should proxy through a service and a pod"
test/e2e/network/service.go: "should provide secure master service"
test/e2e/network/service.go: "should serve a basic endpoint from pods"
test/e2e/network/service.go: "should serve multiport endpoints from pods"
test/e2e/network/service.go: "should be able to create a functioning NodePort service"
test/e2e/network/service.go: "should be able to change the type from ExternalName to ClusterIP"
test/e2e/network/service.go: "should be able to change the type from ExternalName to NodePort"
test/e2e/network/service.go: "should be able to change the type from ClusterIP to ExternalName"
test/e2e/network/service.go: "should be able to change the type from NodePort to ExternalName"
test/e2e/network/service_latency.go: "should not be very high"
test/e2e/node/events.go: "should be sent by kubelets and the scheduler about pods scheduling and running"
test/e2e/node/pods.go: "should be submitted and removed"
test/e2e/node/pods.go: "should be set on Pods with matching resource requests and limits for memory and cpu"
test/e2e/node/pre_stop.go: "should call prestop when killing a pod"
test/e2e/scheduling/predicates.go: "validates resource limits of pods that are allowed to run"
test/e2e/scheduling/predicates.go: "validates that NodeSelector is respected if not matching"
test/e2e/scheduling/predicates.go: "validates that NodeSelector is respected if matching"
test/e2e/scheduling/predicates.go: "validates that there is no conflict between pods with same hostPort but different hostIP and protocol"
test/e2e/scheduling/predicates.go: "validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP"
test/e2e/scheduling/taints.go: "removing taint cancels eviction"
test/e2e/scheduling/taints.go: "evicts pods with minTolerationSeconds"
test/e2e/storage/empty_dir_wrapper.go: "should not conflict"
test/e2e/storage/empty_dir_wrapper.go: "should not cause race condition when used for configmaps"
test/e2e/storage/subpath.go: "should support subpaths with secret pod"
test/e2e/storage/subpath.go: "should support subpaths with configmap pod"
test/e2e/storage/subpath.go: "should support subpaths with configmap pod with mountPath of existing file"
test/e2e/storage/subpath.go: "should support subpaths with downward pod"
test/e2e/storage/subpath.go: "should support subpaths with projected pod"
